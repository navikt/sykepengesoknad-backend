no.nav.security.jwt:
  issuer:
    azureator:
      discoveryurl: ${AZURE_APP_WELL_KNOWN_URL}
      accepted_audience: ${AZURE_APP_CLIENT_ID}
    tokenx:
      discoveryurl: ${TOKEN_X_WELL_KNOWN_URL}
      accepted_audience: ${TOKEN_X_CLIENT_ID}
  client:
    registration:
      pdl-api-client-credentials:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: api://${PDL_API_AAD_CLIENT_ID}/.default
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-secret: ${AZURE_APP_CLIENT_SECRET}
          client-auth-method: client_secret_basic
      medlemskap-vurdering-sykepenger-client-credentials:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: api://${MEDLEMSKAP_VURDERING_AAD_CLIENT_ID}/.default
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-secret: ${AZURE_APP_CLIENT_SECRET}
          client-auth-method: client_secret_basic
      flex-syketilfelle-client-credentials:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: api://${FLEX_SYKETILFELLE_AAD_CLIENT_ID}/.default
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-secret: ${AZURE_APP_CLIENT_SECRET}
          client-auth-method: client_secret_basic
      onbehalfof-syfotilgangskontroll:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: urn:ietf:params:oauth:grant-type:jwt-bearer
        scope: api://${SYFOTILGANGSKONTROLL_AAD_CLIENT_ID}/.default
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-secret: ${AZURE_APP_CLIENT_SECRET}
          client-auth-method: client_secret_basic
      sykepengesoknad-kvitteringer-tokenx:
        token-endpoint-url: ${TOKEN_X_TOKEN_ENDPOINT}
        grant-type: urn:ietf:params:oauth:grant-type:token-exchange
        authentication:
          client-id: ${TOKEN_X_CLIENT_ID}
          client-jwk: ${TOKEN_X_PRIVATE_JWK}
          client-auth-method: private_key_jwt
        token-exchange:
          audience: ${SYKEPENGESOKNAD_KVITTERINGER_TOKENX_CLIENT_ID}
      flex-fss-proxy-client-credentials:
        token-endpoint-url: https://login.microsoftonline.com/${AZURE_APP_TENANT_ID}/oauth2/v2.0/token
        grant-type: client_credentials
        scope: api://${FLEX_FSS_PROXY_AAD_CLIENT_ID}/.default
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-secret: ${AZURE_APP_CLIENT_SECRET}
          client-auth-method: client_secret_basic
      yrkesskade-client-credentials:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: api://${YRKESSKADE_AAD_CLIENT_ID}/.default
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-secret: ${AZURE_APP_CLIENT_SECRET}
          client-auth-method: client_secret_basic
      inntektskomponenten-client-credentials:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: api://${INNTEKTSKOMPONENTEN_AAD_CLIENT_ID}/.default
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-secret: ${AZURE_APP_CLIENT_SECRET}
          client-auth-method: client_secret_basic


logging.config: classpath:logback.xml

pdl.api.url: ${PDL_BASE_URL}

management:
  endpoint:
    prometheus.enabled: true
    health.probes.enabled: true
    health.show-details: always
  endpoints.web:
    base-path: "/internal"
    exposure.include: health, prometheus
  health:
    livenessstate.enabled: true
    readinessState.enabled: true
  metrics.export.prometheus.enabled: true

server:
  shutdown: graceful

spring:
  profiles.active: default
  jpa.open-in-view: false
  main.banner-mode: 'off'
  datasource:
    url: "jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DATABASE}?reWriteBatchedInserts=true"
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
    hikari:
      minimum-idle: 1
      maximum-pool-size: 10
  kafka:
    client-id: ${nais.app.name}-${fasit.environment.name}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: all
      retries: 100000
      properties:
        max.block.ms: 15000
        enable.idempotence: true
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      group-id: ${nais.app.name}-${fasit.environment.name}
      max-poll-records: 1
      auto-offset-reset: none
      enable-auto-commit: false
  cache.type: redis
  data:
    redis:
      host: sykepengesoknad-backend-redis
      port: 6379
      password: ${REDIS_PASSWORD}

aiven-kafka:
  auto-offset-reset: none
