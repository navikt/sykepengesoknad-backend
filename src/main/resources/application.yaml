no.nav.security.jwt:
  issuer:
    selvbetjening:
      discoveryurl: ${LOGINSERVICE_IDPORTEN_DISCOVERY_URL}
      accepted_audience: ${LOGINSERVICE_IDPORTEN_AUDIENCE}
    azureator:
      discoveryurl: ${AZURE_APP_WELL_KNOWN_URL}
      accepted_audience: ${AZURE_APP_CLIENT_ID}
  client:
    registration:
      flex-bucket-uploader-client-credentials:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: api://${FLEX_BUCKET_UPLOADER_AAD_CLIENT_ID}/.default
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-secret: ${AZURE_APP_CLIENT_SECRET}
          client-auth-method: client_secret_basic
      pdl-api-client-credentials:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: api://${PDL_API_AAD_CLIENT_ID}/.default
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-secret: ${AZURE_APP_CLIENT_SECRET}
          client-auth-method: client_secret_basic
      narmesteleder-client-credentials:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: api://${NARMESTELEDER_AAD_CLIENT_ID}/.default
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-secret: ${AZURE_APP_CLIENT_SECRET}
          client-auth-method: client_secret_basic
      flex-syketilfelle-client-credentials:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: api://${FLEX_SYKETILFELLE_AAD_CLIENT_ID}/.default
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-secret: ${AZURE_APP_CLIENT_SECRET}
          client-auth-method: client_secret_basic
      syfosmregister-client-credentials:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: api://${SYFOSMREGISTER_AAD_CLIENT_ID}/.default
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-secret: ${AZURE_APP_CLIENT_SECRET}
          client-auth-method: client_secret_basic
      onbehalfof-syfotilgangskontroll:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: urn:ietf:params:oauth:grant-type:jwt-bearer
        scope: api://${SYFOTILGANGSKONTROLL_AAD_CLIENT_ID}/.default
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-secret: ${AZURE_APP_CLIENT_SECRET}
          client-auth-method: client_secret_basic

logging.config: classpath:logback.xml

pdl.api.url: "http://pdl-api.pdl"

management:
  endpoint.prometheus.enabled: true
  endpoints.web:
    base-path: /internal
    exposure.include: prometheus
    path-mapping.prometheus: /prometheus

spring:
  profiles:
    active: default
  jpa:
    open-in-view: false
  main.banner-mode: 'off'
  datasource:
    url: "jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_DATABASE}?reWriteBatchedInserts=true"
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    hikari:
      minimum-idle: 1
      maximum-pool-size: 3
  kafka:
    client-id: ${nais.app.name}-${fasit.environment.name}
    properties:
      security.protocol: SASL_SSL
      sasl:
        mechanism: PLAIN
        jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="${serviceuser.username}" password="${serviceuser.password}";
      ssl.truststore:
        location: ${javax.net.ssl.trustStore}
        password: ${javax.net.ssl.trustStorePassword}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: all
      retries: 100000
      properties:
        max.block.ms: 15000
        enable.idempotence: true
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      group-id: ${nais.app.name}-${fasit.environment.name}
      max-poll-records: 1
      auto-offset-reset: none
      enable-auto-commit: false
  cache.type: redis
  redis:
   host: redis-syfosoknad
   port: 6379

aiven-kafka:
  auto-offset-reset: none

